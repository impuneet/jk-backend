// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  password  String
  role      String   @default("VIEWER")
  active    Boolean  @default(true)
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // // Relations
  documents     Document[]
  ingestionJobs IngestionJob[]
  conversations Conversation[]
  messages      Message[]

  @@map("users")
}

model Document {
  id               String   @id @default(uuid()) @db.Uuid
  filename         String
  originalFileName String
  mimetype         String
  size             Int
  filePath         String
  title            String?
  description      String?
  status           String   @default("UPLOADED")
  ownerId          String   @db.Uuid
  deleted          Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  // Relations
  user          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ingestionJobs IngestionJob[]
  chunks        DocumentChunk[]

  // Indexes
  @@index([ownerId])
  @@index([status])
  @@map("documents")
}

model IngestionJob {
  id           String    @id @default(uuid()) @db.Uuid
  documentId   String    @db.Uuid
  userId       String    @db.Uuid
  status       String    @default("PENDING")
  errorMessage String?
  startedAt    DateTime?
  completedAt  DateTime?
  deleted      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  // Indexes
  @@index([documentId])
  @@index([userId])
  @@index([status])
  @@map("ingestion_jobs")
}

model Conversation {
  id        String   @id @default(uuid()) @db.Uuid
  title     String?
  userId    String   @db.Uuid
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  // Indexes
  @@index([userId])
  @@index([createdAt])
  @@map("conversations")
}

model Message {
  id             String   @id @default(uuid()) @db.Uuid
  conversationId String   @db.Uuid
  userId         String   @db.Uuid
  content        String   @db.Text
  role           String   // 'user' or 'assistant'
  metadata       Json?    // For storing additional data like sources, tokens, etc.
  deleted        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([conversationId])
  @@index([userId])
  @@index([createdAt])
  @@map("messages")
}

model DocumentChunk {
  id         String   @id @default(uuid()) @db.Uuid
  documentId String   @db.Uuid
  content    String   @db.Text
  embedding  String?  // JSON string of vector embedding for RAG
  chunkIndex Int      // Position of chunk in the document
  metadata   Json?    // Additional metadata like page number, section, etc.
  deleted    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([documentId])
  @@index([chunkIndex])
  @@map("document_chunks")
}